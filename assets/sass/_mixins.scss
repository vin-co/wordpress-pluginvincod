//=========================================
//	!---------- GLOBAL MIXINS ----------
//=========================================

// Sizing shortcuts

@function screen($name, $breakpoints: $grid-breakpoints) {
	@return map-get($breakpoints, $name);
}

@function space($size: 1) {
	@return $spacer * $size;
}

@mixin size($width: 100%, $height: $width) {
	width: $width;
	height: $height;
}

@mixin max-size($width: 100%, $height: $width) {
	max-width: $width;
	max-height: $height;
}

@mixin min-size($width: 0, $height: $width) {
	min-width: $width;
	min-height: $height;
}

@mixin position-horizontal($left: 0, $right: $left) {
	left: $left;
	right: $right;
}

@mixin position-vertical($top: 0, $bottom: $top) {
	top: $top;
	bottom: $bottom;
}

@mixin position($top: 0, $right: 0, $bottom: $top, $left: $right) {
	@include position-vertical($top, $bottom);
	@include position-horizontal($left, $right);
}

@mixin margin-horizontal($left: 0, $right: $left) {
	margin-left: $left;
	margin-right: $right;
}

@mixin margin-vertical($top: 0, $bottom: $top) {
	margin-top: $top;
	margin-bottom: $bottom;
}

@mixin padding-horizontal($left: 0, $right: $left) {
	padding-left: $left;
	padding-right: $right;
}

@mixin padding-vertical($top: 0, $bottom: $top) {
	padding-top: $top;
	padding-bottom: $bottom;
}

@mixin before($content: '') {

	&:before {
		content: $content;
		@content;
	}
}

@mixin after($content: '') {

	&:after {
		content: $content;
		@content;
	}
}

@mixin before-after($content: '') {

	&:before, &:after {
		content: $content;
		@content;
	}
}

@mixin aspect-ratio($width: 1, $height: 1) {
	position: relative;

	@include before() {
		display: block;
		width: 100%;
		padding-top: ($height / $width) * 100%;
	}

	> * {
		@include position();
		@include size();
		position: absolute;
	}
}

@mixin translate($x: 0, $y: 0) {
	transform: translate3d($x, $y, 0);
}

@mixin background-image($size: cover, $position: center) {
	background-position: $position;
	background-repeat: no-repeat;
	background-size: $size;
}

@mixin mask-image($size: cover, $position: center) {
	mask-position: $position;
	mask-repeat: no-repeat;
	mask-size: $size;
}

@mixin text-inherit() {
	font-family: inherit;
	font-size: inherit;
	font-style: inherit;
	font-weight: inherit;
	letter-spacing: inherit;
	text-decoration: inherit;
	text-overflow: inherit;
	text-transform: inherit;
	text-align: inherit;
	white-space: inherit;
	color: inherit;
}

@mixin headings-style() {

	h1, h2, h3, h4, h5, h6 {
		@content;
	}
}

@mixin placeholder-style() {

	&::placeholder {
		opacity: 1;
		@content;
	}

	&:-ms-input-placeholder, &::-ms-input-placeholder, &:-moz-placeholder, &::-moz-placeholder, &::-webkit-input-placeholder {
		@content;
	}
}

@mixin placeholder-color($color: $input-placeholder-color) {

	@include placeholder-style {
		color: $color;
	}
}

//==========================================
//	!---------- CONTENT MIXINS ----------
//==========================================

@mixin col-flex {
	flex-basis: 0;
	flex-grow: 1;
	max-width: 100%;
}

@mixin col-auto {
	flex: 0 0 auto;
	width: auto;
	max-width: none;
}

@mixin column($breakpoint: all, $size: flex, $gutter: $grid-gutter-width / 2) {
	position: relative;

	@include media-breakpoint-up($breakpoint) {
		@include padding-horizontal($gutter);
	}

	@if $breakpoint == all {
		@if $size == flex {
			@include col-flex;
		} @else if $size == auto {
			@include col-auto;
		} @else {
			@include make-col($size);
		}
	} @else {
		@include media-breakpoint-up($breakpoint) {
			@if $size == flex {
				@include col-flex;
			} @else if $size == auto {
				@include col-auto;
			} @else {
				@include make-col($size);
			}
		}
	}
}

@mixin button($color: $primary, $outline: false, $size: false) {
	display: inline-block;
	padding: var(--#{$prefix}btn-padding-y) var(--#{$prefix}btn-padding-x);
	font-family: var(--#{$prefix}btn-font-family);
	@include font-size(var(--#{$prefix}btn-font-size));
	font-weight: var(--#{$prefix}btn-font-weight);
	line-height: var(--#{$prefix}btn-line-height);
	color: var(--#{$prefix}btn-color);
	text-align: center;
	text-decoration: if($link-decoration == none, null, none);
	white-space: $btn-white-space;
	vertical-align: middle;
	cursor: if($enable-button-pointers, pointer, null);
	user-select: none;
	border: var(--#{$prefix}btn-border-width) solid var(--#{$prefix}btn-border-color);
	@include border-radius(var(--#{$prefix}btn-border-radius));
	@include gradient-bg(var(--#{$prefix}btn-bg));
	@include box-shadow(var(--#{$prefix}btn-box-shadow));
	@include transition($btn-transition);

	@if $size == lg {
		@include button-size($btn-padding-y-lg, $btn-padding-x-lg, $btn-font-size-lg, $btn-border-radius-lg);
	} @else if $size == sm {
		@include button-size($btn-padding-y-sm, $btn-padding-x-sm, $btn-font-size-sm, $btn-border-radius-sm);
	} @else {
		@include button-size($btn-padding-y, $btn-padding-x, $btn-font-size, $btn-border-radius);
	}

	&:hover,
	&:first-child:hover {
		color: var(--#{$prefix}btn-hover-color);
		text-decoration: if($link-hover-decoration == underline, none, null);
		background-color: var(--#{$prefix}btn-hover-bg);
		border-color: var(--#{$prefix}btn-hover-border-color);
	}

	&:focus-visible {
		color: var(--#{$prefix}btn-hover-color);
		@include gradient-bg(var(--#{$prefix}btn-hover-bg));
		border-color: var(--#{$prefix}btn-hover-border-color);
		outline: 0;
		@if $enable-shadows {
			box-shadow: var(--#{$prefix}btn-box-shadow), var(--#{$prefix}btn-focus-box-shadow);
		} @else {
			box-shadow: var(--#{$prefix}btn-focus-box-shadow);
		}
	}

	&:active,
	&:first-child:active,
	&.active,
	&.show {
		color: var(--#{$prefix}btn-active-color);
		background-color: var(--#{$prefix}btn-active-bg);
		background-image: if($enable-gradients, none, null);
		border-color: var(--#{$prefix}btn-active-border-color);
		@include box-shadow(var(--#{$prefix}btn-active-shadow));

		&:focus-visible {
			@if $enable-shadows {
				box-shadow: var(--#{$prefix}btn-active-shadow), var(--#{$prefix}btn-focus-box-shadow);
			} @else {
				box-shadow: var(--#{$prefix}btn-focus-box-shadow);
			}
		}
	}

	&:disabled,
	&.disabled,
	fieldset:disabled & {
		color: var(--#{$prefix}btn-disabled-color);
		pointer-events: none;
		background-color: var(--#{$prefix}btn-disabled-bg);
		background-image: if($enable-gradients, none, null);
		border-color: var(--#{$prefix}btn-disabled-border-color);
		opacity: var(--#{$prefix}btn-disabled-opacity);
		@include box-shadow(none);
	}

	@if $outline {
		@include button-outline-variant($color);
	} @else {
		@include button-variant($color, $color);
	}
}
